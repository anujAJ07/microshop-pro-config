# Final, Correct Configuration for API Gateway
server.port=8080

# === Eureka Configuration ===
# Use the special Docker DNS name for registration
#eureka.instance.hostname=host.docker.internal
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka

# === JWT Secret Key ===
jwt.secret=4D6251655468576D5A7134743777217A25432A462D4A614E645267556B587032

# === Tracing & Zipkin Configuration ===
management.tracing.sampling.probability=1.0
management.zipkin.tracing.endpoint=http://zipkin:9411/api/v2/spans

# === Resilience4j Circuit Breaker Configuration ===
resilience4j.circuitbreaker.configs.default.sliding-window-size=5
resilience4j.circuitbreaker.configs.default.failure-rate-threshold=50
resilience4j.circuitbreaker.configs.default.wait-duration-in-open-state=10s
resilience4j.circuitbreaker.instances.product-service.base-config=default
resilience4j.circuitbreaker.instances.order-service.base-config=default
resilience4j.circuitbreaker.instances.inventory-service.base-config=default

# --- Routing Rules ---
# Rule 1: Product Service with Circuit Breaker
spring.cloud.gateway.server.webflux.routes[0].id=product-service
spring.cloud.gateway.server.webflux.routes[0].uri=lb://product-service
spring.cloud.gateway.server.webflux.routes[0].predicates[0]=Path=/products/**
spring.cloud.gateway.server.webflux.routes[0].filters[0]=AuthenticationFilter
spring.cloud.gateway.server.webflux.routes[0].filters[1].name=CircuitBreaker
spring.cloud.gateway.server.webflux.routes[0].filters[1].args.name=product-service
spring.cloud.gateway.server.webflux.routes[0].filters[1].args.fallbackuri=forward:/fallback/productService

# Rule 2: Order Service with Circuit Breaker
spring.cloud.gateway.server.webflux.routes[1].id=order-service
spring.cloud.gateway.server.webflux.routes[1].uri=lb://order-service
spring.cloud.gateway.server.webflux.routes[1].predicates[0]=Path=/orders/**
spring.cloud.gateway.server.webflux.routes[1].filters[0]=AuthenticationFilter
spring.cloud.gateway.server.webflux.routes[1].filters[1].name=CircuitBreaker
spring.cloud.gateway.server.webflux.routes[1].filters[1].args.name=order-service
spring.cloud.gateway.server.webflux.routes[1].filters[1].args.fallbackuri=forward:/fallback/orderService

# Rule 3: Auth Service (PUBLIC - NO FILTER)
spring.cloud.gateway.server.webflux.routes[2].id=auth-service
spring.cloud.gateway.server.webflux.routes[2].uri=lb://auth-server
spring.cloud.gateway.server.webflux.routes[2].predicates[0]=Path=/api/v1/auth/**

# Rule 4: Inventory Service with Circuit Breaker
spring.cloud.gateway.server.webflux.routes[3].id=inventory-service
spring.cloud.gateway.server.webflux.routes[3].uri=lb://inventory-service
spring.cloud.gateway.server.webflux.routes[3].predicates[0]=Path=/inventory/**
spring.cloud.gateway.server.webflux.routes[3].filters[0]=AuthenticationFilter
spring.cloud.gateway.server.webflux.routes[3].filters[1].name=CircuitBreaker
spring.cloud.gateway.server.webflux.routes[3].filters[1].args.name=inventory-service
spring.cloud.gateway.server.webflux.routes[3].filters[1].args.fallbackuri=forward:/fallback/inventoryService
# === Config Client Retry Settings ===
spring.cloud.config.fail-fast=true
spring.cloud.config.retry.initial-interval=2000
spring.cloud.config.retry.max-interval=5000
spring.cloud.config.retry.max-attempts=10
